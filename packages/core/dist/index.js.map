{"version":3,"sources":["../src/mcp/client.ts","../src/webrtc/bridge-server.ts","../src/types/config.ts","../src/realtime/connection.ts","../src/proxy.ts"],"names":["process","ConnectionState"],"mappings":"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A;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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","file":"index.js","sourcesContent":["import type {\n  MCPClientInterface,\n  MCPTool,\n  MCPToolCallResult,\n  MCPRequest,\n  MCPResponse,\n  MCPToolsListResponse,\n  AuthConfig,\n} from '../types/index.js';\n\n/**\n * HTTP client for communicating with MCP servers\n * Implements the simplified approach focusing on HTTP/SSE transport\n */\nexport class MCPClient implements MCPClientInterface {\n  private readonly baseUrl: string;\n  private readonly auth: AuthConfig | undefined;\n  private readonly timeout: number;\n  private requestId = 0;\n\n  constructor(baseUrl: string, auth?: AuthConfig, timeout = 10000) {\n    // Ensure URL doesn't have trailing slash for consistent API calls\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n    this.auth = auth;\n    this.timeout = timeout;\n  }\n\n  /**\n   * Discover available tools from the MCP server\n   * @returns Array of available MCP tools\n   */\n  async discoverTools(): Promise<MCPTool[]> {\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/list',\n    };\n\n    const response = await this.sendRequest<MCPToolsListResponse>(request);\n    \n    if (response.error) {\n      throw new Error(`MCP tools/list failed: ${response.error.message}`);\n    }\n\n    if (!response.result) {\n      throw new Error('MCP tools/list returned no result');\n    }\n\n    return response.result.tools;\n  }\n\n  /**\n   * Call a specific tool with the provided arguments\n   * @param name - Tool name to call\n   * @param args - Arguments to pass to the tool\n   * @returns Tool execution result\n   */\n  async callTool(name: string, args: Record<string, unknown>): Promise<MCPToolCallResult> {\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/call',\n      params: {\n        name,\n        arguments: args,\n      },\n    };\n\n    const response = await this.sendRequest<MCPToolCallResult>(request);\n    \n    if (response.error) {\n      throw new Error(`MCP tools/call failed for ${name}: ${response.error.message}`);\n    }\n\n    if (!response.result) {\n      throw new Error(`MCP tools/call returned no result for ${name}`);\n    }\n\n    return response.result;\n  }\n\n  /**\n   * Check if the client is connected (basic connectivity test)\n   * @returns true if connected, false otherwise\n   */\n  isConnected(): boolean {\n    // For HTTP-based MCP, we don't maintain persistent connections\n    // This is a simple URL validation\n    try {\n      new URL(this.baseUrl);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Disconnect from the MCP server\n   * For HTTP-based connections, this is a no-op\n   */\n  async disconnect(): Promise<void> {\n    // No persistent connection to close for HTTP-based MCP\n    return Promise.resolve();\n  }\n\n  /**\n   * Send a JSON-RPC request to the MCP server\n   * @param request - The JSON-RPC request to send\n   * @returns The JSON-RPC response\n   */\n  private async sendRequest<T>(request: MCPRequest): Promise<MCPResponse<T>> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(request),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const jsonResponse = await response.json() as MCPResponse<T>;\n      \n      // Validate JSON-RPC response structure\n      if (jsonResponse.jsonrpc !== '2.0') {\n        throw new Error('Invalid JSON-RPC response: missing or incorrect jsonrpc field');\n      }\n\n      if (jsonResponse.id !== request.id) {\n        throw new Error('Invalid JSON-RPC response: mismatched request ID');\n      }\n\n      return jsonResponse;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error(`MCP request timeout after ${this.timeout}ms`);\n        }\n        throw error;\n      }\n      \n      throw new Error('Unknown error during MCP request');\n    }\n  }\n\n  /**\n   * Generate HTTP headers for the request\n   * @returns Headers object with authentication and content type\n   */\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n\n    // Add authentication header if configured\n    if (this.auth) {\n      const headerName = this.auth.header || 'Authorization';\n      const headerValue = this.auth.type === 'bearer' \n        ? `Bearer ${this.auth.token}`\n        : this.auth.token;\n      \n      headers[headerName] = headerValue;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Generate a unique request ID for JSON-RPC\n   * @returns Unique request identifier\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${++this.requestId}`;\n  }\n} ","import express from 'express';\nimport cors from 'cors';\nimport { spawn, ChildProcess } from 'child_process';\nimport type { Server } from 'http';\nimport type { MCPConfig, OpenAIConfig, MCPClientInterface, MCPTool, MCPToolCallResult, MCPRequest, MCPResponse } from '../types/index.js';\nimport { MCPClient } from '../mcp/client.js';\n\n/**\n * MCP Client that communicates via stdio with spawned processes\n */\nclass StdioMCPClient implements MCPClientInterface {\n  private readonly process: ChildProcess;\n  private readonly timeout: number;\n  private requestId = 0;\n  private pendingRequests = new Map<string, { resolve: (value: any) => void; reject: (error: Error) => void; timeout: NodeJS.Timeout }>();\n  private buffer = '';\n  private initialized = false;\n\n  constructor(process: ChildProcess, timeout = 10000) {\n    this.process = process;\n    this.timeout = timeout;\n    this.setupStdioHandling();\n  }\n\n  async discoverTools(): Promise<MCPTool[]> {\n    // Ensure MCP server is initialized before discovering tools\n    if (!this.initialized) {\n      await this.initializeMCP();\n    }\n\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/list',\n    };\n\n    const response = await this.sendRequest(request);\n    \n    if (response.error) {\n      throw new Error(`MCP tools/list failed: ${response.error.message}`);\n    }\n\n    return response.result?.tools || [];\n  }\n\n  private async initializeMCP(): Promise<void> {\n    // Send initialize request\n    const initRequest: MCPRequest = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'initialize',\n      params: {\n        protocolVersion: '2024-11-05',\n        capabilities: {\n          tools: {}\n        },\n        clientInfo: {\n          name: 'webrtc-bridge',\n          version: '1.0.0'\n        }\n      }\n    };\n\n    const initResponse = await this.sendRequest(initRequest);\n    \n    if (initResponse.error) {\n      throw new Error(`MCP initialization failed: ${initResponse.error.message}`);\n    }\n\n    // Send initialized notification\n    const initializedNotification = {\n      jsonrpc: '2.0',\n      method: 'notifications/initialized'\n    };\n\n    // Send notification (no response expected)\n    if (this.process.stdin) {\n      this.process.stdin.write(JSON.stringify(initializedNotification) + '\\n');\n    }\n\n    // Wait a moment for the server to process the notification\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    this.initialized = true;\n  }\n\n  async callTool(name: string, args: Record<string, unknown>): Promise<MCPToolCallResult> {\n    // Ensure MCP server is initialized before calling tools\n    if (!this.initialized) {\n      await this.initializeMCP();\n    }\n\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      id: this.generateRequestId(),\n      method: 'tools/call',\n      params: {\n        name,\n        arguments: args,\n      },\n    };\n\n    const response = await this.sendRequest(request);\n    \n    if (response.error) {\n      throw new Error(`MCP tools/call failed for ${name}: ${response.error.message}`);\n    }\n\n    if (!response.result) {\n      throw new Error(`MCP tools/call returned no result for ${name}`);\n    }\n\n    return response.result;\n  }\n\n  isConnected(): boolean {\n    return this.process && !this.process.killed;\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.process && !this.process.killed) {\n      this.process.kill('SIGTERM');\n    }\n  }\n\n  private setupStdioHandling(): void {\n    if (this.process.stdout) {\n      this.process.stdout.on('data', (data: Buffer) => {\n        this.buffer += data.toString();\n        this.processBuffer();\n      });\n    }\n\n    if (this.process.stderr) {\n      this.process.stderr.on('data', (data: Buffer) => {\n        console.error('MCP stderr:', data.toString());\n      });\n    }\n  }\n\n  private processBuffer(): void {\n    const lines = this.buffer.split('\\n');\n    this.buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n    for (const line of lines) {\n      if (line.trim()) {\n        try {\n          const response = JSON.parse(line) as MCPResponse<any>;\n          this.handleResponse(response);\n        } catch (error) {\n          // Only log if it looks like it should be JSON (starts with { or [)\n          const trimmed = line.trim();\n          if (trimmed.startsWith('{') || trimmed.startsWith('[')) {\n            console.error('Failed to parse MCP response:', line, error);\n          }\n          // Otherwise it's likely just startup/debug output, ignore silently\n        }\n      }\n    }\n  }\n\n  private handleResponse(response: MCPResponse<any>): void {\n    const requestId = response.id?.toString();\n    if (requestId && this.pendingRequests.has(requestId)) {\n      const pending = this.pendingRequests.get(requestId)!;\n      clearTimeout(pending.timeout);\n      this.pendingRequests.delete(requestId);\n      pending.resolve(response);\n    }\n  }\n\n  private async sendRequest(request: MCPRequest): Promise<MCPResponse<any>> {\n    return new Promise((resolve, reject) => {\n      const requestId = request.id?.toString();\n      if (!requestId) {\n        reject(new Error('Request ID is required'));\n        return;\n      }\n\n      const timeout = setTimeout(() => {\n        this.pendingRequests.delete(requestId);\n        reject(new Error(`MCP request timeout after ${this.timeout}ms`));\n      }, this.timeout);\n\n      this.pendingRequests.set(requestId, { resolve, reject, timeout });\n\n      const requestLine = JSON.stringify(request) + '\\n';\n      if (this.process.stdin) {\n        this.process.stdin.write(requestLine);\n      } else {\n        reject(new Error('Process stdin not available'));\n      }\n    });\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${++this.requestId}`;\n  }\n}\n\nexport interface WebRTCBridgeConfig {\n  openai: OpenAIConfig & {\n    /** OpenAI API key for generating ephemeral keys */\n    apiKey: string;\n  };\n  mcp: (\n    // HTTP MCP server configuration\n    MCPConfig\n  ) | (\n    // Spawned MCP server configuration\n    {\n      /** MCP server command and arguments */\n      command: string;\n      args?: string[];\n      /** Environment variables for MCP server */\n      env?: Record<string, string>;\n      /** Request timeout in milliseconds */\n      timeout?: number;\n    }\n  );\n  server?: {\n    /** Port for the bridge server (default: 8084) */\n    port?: number;\n    /** Host for the bridge server (default: localhost) */\n    host?: string;\n    /** Enable CORS (default: true) */\n    cors?: boolean;\n  };\n  debug?: {\n    /** Enable verbose logging for function calls and tools (default: false) */\n    enabled?: boolean;\n    /** Log discovered tools when creating sessions (default: false) */\n    logTools?: boolean;\n    /** Log function call details (default: false) */\n    logFunctionCalls?: boolean;\n  };\n}\n\n/**\n * WebRTC Bridge Server that extends OpenAI's Realtime API with MCP integration\n * \n * This server provides:\n * 1. Ephemeral API key generation for WebRTC connections\n * 2. MCP server bridge for tool calls\n * 3. Simple integration with existing Realtime API applications\n * \n * Usage:\n * ```typescript\n * const bridge = new WebRTCBridgeServer({\n *   openai: {\n *     apiKey: process.env.OPENAI_API_KEY!,\n *     model: 'gpt-4o-realtime-preview-2024-12-17'\n *   },\n *   mcp: {\n *     command: 'npx',\n *     args: ['-y', '@hubspot/mcp-server'],\n *     env: { PRIVATE_APP_ACCESS_TOKEN: process.env.HUBSPOT_TOKEN }\n *   }\n * });\n * \n * await bridge.start();\n * ```\n */\nexport class WebRTCBridgeServer {\n  private readonly config: WebRTCBridgeConfig;\n  private app: express.Application;\n  private server: Server | null = null;\n  private mcpProcess: ChildProcess | null = null;\n  private mcpClient: MCPClientInterface | null = null;\n  private isRunning = false;\n  \n  // Bidirectional mapping between OpenAI function names and MCP tool names\n  private functionNameToMCPTool = new Map<string, string>();\n  private mcpToolToFunctionName = new Map<string, string>();\n\n  constructor(config: WebRTCBridgeConfig) {\n    this.config = {\n      ...config,\n      server: {\n        port: 8084,\n        host: 'localhost',\n        cors: true,\n        ...config.server,\n      },\n    };\n\n    this.app = express();\n    this.setupMiddleware();\n    this.setupRoutes();\n  }\n\n  /**\n   * Start the WebRTC bridge server\n   */\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      throw new Error('Server is already running');\n    }\n\n    try {\n      // Start MCP server if command is provided\n      if ('command' in this.config.mcp) {\n        await this.startMCPServer();\n      } else if ('url' in this.config.mcp) {\n        // Connect to existing MCP server\n        await this.connectToMCPServer();\n      } else {\n        throw new Error('Either mcp.command or mcp.url must be provided');\n      }\n\n      // Start HTTP server\n      await this.startHTTPServer();\n      \n      this.isRunning = true;\n      console.log(`🚀 WebRTC Bridge Server running on http://${this.config.server!.host}:${this.config.server!.port}`);\n      console.log('📡 Endpoints:');\n      console.log(`   GET  /session - Get ephemeral API key for WebRTC`);\n      console.log(`   POST /mcp     - MCP proxy for tool calls`);\n      console.log(`   GET  /health  - Health check`);\n    } catch (error) {\n      await this.stop();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the WebRTC bridge server\n   */\n  async stop(): Promise<void> {\n    this.isRunning = false;\n\n    const stopPromises: Promise<void>[] = [];\n\n    // Stop HTTP server\n    if (this.server) {\n      stopPromises.push(new Promise(resolve => {\n        this.server!.close(() => resolve());\n      }));\n    }\n\n    // Stop MCP client\n    if (this.mcpClient) {\n      stopPromises.push(this.mcpClient.disconnect());\n    }\n\n    // Stop MCP process\n    if (this.mcpProcess && !this.mcpProcess.killed) {\n      this.mcpProcess.kill('SIGTERM');\n      stopPromises.push(new Promise(resolve => {\n        this.mcpProcess!.on('exit', () => resolve());\n      }));\n    }\n\n    await Promise.all(stopPromises);\n    \n    // Clear function name mappings for clean state\n    this.functionNameToMCPTool.clear();\n    this.mcpToolToFunctionName.clear();\n    \n    console.log('🛑 WebRTC Bridge Server stopped');\n  }\n\n  /**\n   * Check if the server is running\n   */\n  isServerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Get the server URL\n   */\n  getServerURL(): string {\n    return `http://${this.config.server!.host}:${this.config.server!.port}`;\n  }\n\n  private setupMiddleware(): void {\n    // CORS middleware\n    if (this.config.server!.cors) {\n      this.app.use(cors({\n        origin: true,\n        credentials: true,\n      }));\n    }\n\n    // JSON body parser\n    this.app.use(express.json());\n    \n    // Request logging\n    this.app.use((req, _res, next) => {\n      console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);\n      next();\n    });\n  }\n\n  private setupRoutes(): void {\n    // Health check endpoint\n    this.app.get('/health', (_req, res) => {\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        mcp: {\n          connected: this.mcpClient?.isConnected() ?? false,\n          processRunning: this.mcpProcess ? !this.mcpProcess.killed : false,\n        },\n      });\n    });\n\n    // Ephemeral API key endpoint for WebRTC\n    this.app.get('/session', async (_req, res) => {\n      try {\n        // Get MCP tools and format them for OpenAI\n        let tools: any[] = [];\n        let instructions = this.config.openai.instructions || 'You are a helpful assistant with access to external tools.';\n        \n        if (this.mcpClient && this.mcpClient.isConnected()) {\n          try {\n            const mcpTools = await this.mcpClient.discoverTools();\n            \n            // Convert MCP tools to OpenAI Realtime API format with strict validation\n            tools = mcpTools.map(tool => {\n              const parameters = this.convertMCPSchemaToOpenAI(tool.inputSchema);\n              \n              // Ensure function name follows OpenAI conventions\n              const functionName = this.sanitizeFunctionName(tool.name);\n              \n                          return {\n              type: 'function',\n              name: functionName,\n              description: tool.description || `Execute ${tool.name} tool`,\n              parameters\n              // Note: Realtime API doesn't support strict mode like Chat Completions API\n            };\n            });\n\n            if (this.config.debug?.enabled || this.config.debug?.logTools) {\n              console.log(`📡 Including ${tools.length} MCP tools in session`);\n              tools.forEach(tool => {\n                console.log(`   - ${tool.name}: ${tool.description?.substring(0, 80)}...`);\n                if (this.config.debug?.enabled) {\n                  console.log(`     Schema:`, JSON.stringify(tool.parameters, null, 2));\n                }\n              });\n            } else {\n              console.log(`📡 Including ${tools.length} MCP tools in session`);\n            }\n          } catch (error) {\n            console.warn('Failed to get MCP tools for session:', error);\n          }\n        }\n\n        const sessionConfig: any = {\n          model: this.config.openai.model,\n          voice: this.config.openai.voice || 'alloy',\n          modalities: ['text', 'audio'],\n          instructions,\n        };\n\n        // Only include tools if we have any\n        if (tools.length > 0) {\n          sessionConfig.tools = tools;\n        }\n\n        if (this.config.debug?.enabled) {\n          console.log(`🔧 Sending session config to OpenAI:`, JSON.stringify(sessionConfig, null, 2));\n        }\n\n        const response = await fetch('https://api.openai.com/v1/realtime/sessions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.config.openai.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(sessionConfig),\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`❌ OpenAI API error ${response.status}:`, errorText);\n          throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);\n        }\n\n        const sessionData = await response.json();\n        res.json(sessionData);\n      } catch (error) {\n        console.error('Failed to create ephemeral session:', error);\n        res.status(500).json({\n          error: 'Failed to create session',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    });\n\n    // MCP proxy endpoint\n    this.app.post('/mcp', async (req, res) => {\n      try {\n        if (!this.mcpClient || !this.mcpClient.isConnected()) {\n          throw new Error('MCP client not connected');\n        }\n\n        const { method, params, id } = req.body;\n\n        let result;\n        switch (method) {\n          case 'tools/list':\n            result = await this.mcpClient.discoverTools();\n            res.json({\n              jsonrpc: '2.0',\n              result: { tools: result },\n              id,\n            });\n            break;\n\n          case 'tools/call':\n            const { name, arguments: args } = params;\n            // Map OpenAI function name back to original MCP tool name\n            const originalToolName = this.getOriginalMCPToolName(name);\n            \n            if (this.config.debug?.enabled || this.config.debug?.logFunctionCalls) {\n              console.log(`🔄 Function call mapping: \"${name}\" → \"${originalToolName}\"`);\n            }\n            \n            result = await this.mcpClient.callTool(originalToolName, args);\n            res.json({\n              jsonrpc: '2.0',\n              result,\n              id,\n            });\n            break;\n\n          default:\n            throw new Error(`Unsupported method: ${method}`);\n        }\n      } catch (error) {\n        console.error('MCP proxy error:', error);\n        res.status(500).json({\n          jsonrpc: '2.0',\n          error: {\n            code: -32603,\n            message: error instanceof Error ? error.message : 'Internal error',\n          },\n          id: req.body.id,\n        });\n      }\n    });\n\n    // Tools endpoint for OpenAI Realtime API format\n    this.app.get('/tools', async (_req, res) => {\n      try {\n        if (!this.mcpClient || !this.mcpClient.isConnected()) {\n          res.json({ tools: [] });\n          return;\n        }\n\n        const mcpTools = await this.mcpClient.discoverTools();\n        \n        // Convert MCP tools to OpenAI Realtime API format with proper schema validation\n        const realtimeTools = mcpTools.map(tool => {\n          const parameters = this.convertMCPSchemaToOpenAI(tool.inputSchema);\n          const functionName = this.sanitizeFunctionName(tool.name);\n          \n          return {\n            type: 'function',\n            name: functionName,\n            description: tool.description || `Execute ${tool.name} tool`,\n            parameters\n            // Note: Realtime API doesn't support strict mode like Chat Completions API\n          };\n        });\n\n        res.json({ \n          tools: realtimeTools,\n          instructions: this.config.openai.instructions || 'You are a helpful assistant with access to external tools.'\n        });\n      } catch (error) {\n        console.error('Failed to get tools:', error);\n        res.status(500).json({\n          error: 'Failed to get tools',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    });\n\n    // Serve static files from the examples directory for development\n    if (process.env.NODE_ENV === 'development') {\n      this.app.use('/demo', express.static('examples/hubspot-test'));\n    }\n\n    // Serve the generic demo\n    this.app.get('/demo', (_req, res) => {\n      res.send(this.getGenericDemoHTML());\n    });\n\n    // Serve the generic demo HTML directly\n    this.app.get('/generic-demo.html', (_req, res) => {\n      res.send(this.getGenericDemoHTML());\n    });\n  }\n\n  private async startMCPServer(): Promise<void> {\n    if (!('command' in this.config.mcp)) {\n      throw new Error('MCP command not provided');\n    }\n\n    const mcpConfig = this.config.mcp;\n    console.log(`🔧 Starting MCP server: ${mcpConfig.command} ${mcpConfig.args?.join(' ') || ''}`);\n\n    this.mcpProcess = spawn(mcpConfig.command, mcpConfig.args || [], {\n      stdio: ['pipe', 'pipe', 'pipe'],\n      env: { ...process.env, ...mcpConfig.env },\n    });\n\n    // Handle MCP process events\n    this.mcpProcess.on('error', (error) => {\n      console.error('MCP process error:', error);\n    });\n\n    this.mcpProcess.on('exit', (code, signal) => {\n      console.log(`MCP process exited with code ${code}, signal ${signal}`);\n    });\n\n    // Create a stdio-based MCP client\n    this.mcpClient = new StdioMCPClient(this.mcpProcess, mcpConfig.timeout || 10000);\n    \n    // Wait for connection and tool discovery\n    const tools = await this.mcpClient.discoverTools();\n    console.log(`✅ Connected to MCP server - found ${tools.length} tools`);\n    \n    if (this.config.debug?.enabled || this.config.debug?.logTools) {\n      console.log('🔍 Discovered MCP tools:');\n      tools.forEach((tool, index) => {\n        console.log(`   ${index + 1}. ${tool.name}: ${tool.description || 'No description'}`);\n      });\n    }\n  }\n\n  private async connectToMCPServer(): Promise<void> {\n    if (!('url' in this.config.mcp)) {\n      throw new Error('MCP URL not provided');\n    }\n\n    const mcpConfig = this.config.mcp;\n    console.log(`🔗 Connecting to MCP server: ${mcpConfig.url}`);\n    \n    this.mcpClient = new MCPClient(mcpConfig.url, mcpConfig.auth, mcpConfig.timeout);\n    \n    const tools = await this.mcpClient.discoverTools();\n    console.log(`✅ Connected to MCP server - found ${tools.length} tools`);\n  }\n\n  private async startHTTPServer(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const port = this.config.server!.port!;\n      const host = this.config.server!.host!;\n      \n      this.server = this.app.listen(port, host, () => {\n        resolve();\n      });\n\n      this.server.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  private getGenericDemoHTML(): string {\n    const serverUrl = this.getServerURL();\n    const modelName = this.config.openai.model;\n    \n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>🎤 Generic WebRTC + MCP Demo</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            color: white;\n            padding: 20px;\n        }\n\n        .container {\n            max-width: 1400px;\n            margin: 0 auto;\n            display: grid;\n            grid-template-columns: 1fr 400px;\n            gap: 20px;\n            height: calc(100vh - 40px);\n        }\n\n        .main-panel {\n            background: rgba(255, 255, 255, 0.1);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n        }\n\n        .side-panel {\n            background: rgba(255, 255, 255, 0.1);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 20px;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n            font-size: 2.2em;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n\n        .status {\n            padding: 15px;\n            border-radius: 10px;\n            margin: 15px 0;\n            font-weight: 600;\n            text-align: center;\n            transition: all 0.3s ease;\n        }\n        .status.connecting { background: rgba(255, 193, 7, 0.3); border: 2px solid #ffc107; }\n        .status.connected { background: rgba(40, 167, 69, 0.3); border: 2px solid #28a745; }\n        .status.error { background: rgba(220, 53, 69, 0.3); border: 2px solid #dc3545; }\n\n        .controls {\n            display: flex;\n            gap: 15px;\n            margin: 20px 0;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n\n        button {\n            background: rgba(255, 255, 255, 0.2);\n            border: 2px solid rgba(255, 255, 255, 0.3);\n            color: white;\n            padding: 12px 24px;\n            border-radius: 25px;\n            cursor: pointer;\n            font-size: 16px;\n            font-weight: 600;\n            transition: all 0.3s ease;\n            backdrop-filter: blur(5px);\n        }\n        button:hover:not(:disabled) {\n            background: rgba(255, 255, 255, 0.3);\n            border-color: rgba(255, 255, 255, 0.5);\n            transform: translateY(-2px);\n        }\n        button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .voice-controls {\n            text-align: center;\n            margin: 20px 0;\n        }\n\n        .connection-indicator {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.2);\n            border: 3px solid rgba(255, 255, 255, 0.3);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 auto 15px;\n            font-size: 1.8em;\n            transition: all 0.3s ease;\n        }\n        .connection-indicator.connected {\n            background: rgba(40, 167, 69, 0.5);\n            border-color: #28a745;\n            animation: pulse 2s infinite;\n        }\n        .connection-indicator.talking {\n            background: rgba(220, 53, 69, 0.5);\n            border-color: #dc3545;\n            animation: pulse 1s infinite;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n        }\n\n        .audio-level {\n            margin: 15px 0;\n        }\n        .audio-bar {\n            width: 200px;\n            height: 15px;\n            background: rgba(255, 255, 255, 0.2);\n            border-radius: 10px;\n            overflow: hidden;\n            margin: 10px auto;\n        }\n        .audio-fill {\n            height: 100%;\n            background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);\n            width: 0%;\n            transition: width 0.1s ease;\n        }\n\n        .transcript-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n        }\n\n        .transcript {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            flex: 1;\n            overflow-y: auto;\n            font-family: 'Monaco', 'Menlo', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n        }\n\n        .transcript-entry {\n            margin: 10px 0;\n            padding: 10px;\n            border-radius: 8px;\n            border-left: 4px solid;\n        }\n        .transcript-entry.user {\n            background: rgba(59, 130, 246, 0.2);\n            border-left-color: #3b82f6;\n        }\n        .transcript-entry.assistant {\n            background: rgba(34, 197, 94, 0.2);\n            border-left-color: #22c55e;\n        }\n        .transcript-entry.system {\n            background: rgba(168, 85, 247, 0.2);\n            border-left-color: #a855f7;\n        }\n        .transcript-entry.error {\n            background: rgba(239, 68, 68, 0.2);\n            border-left-color: #ef4444;\n        }\n\n        .transcript-header {\n            font-weight: bold;\n            margin-bottom: 5px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .transcript-content {\n            white-space: pre-wrap;\n            word-wrap: break-word;\n        }\n\n        .tools-section {\n            margin-bottom: 20px;\n        }\n\n        .tools-list {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 15px;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n\n        .tool-item {\n            background: rgba(255, 255, 255, 0.1);\n            margin: 8px 0;\n            padding: 10px;\n            border-radius: 6px;\n            font-size: 12px;\n        }\n\n        .tool-name {\n            font-weight: bold;\n            color: #ffc107;\n            margin-bottom: 4px;\n        }\n\n        .tool-description {\n            color: rgba(255, 255, 255, 0.8);\n            font-size: 11px;\n        }\n\n        .config-section {\n            margin-bottom: 20px;\n        }\n\n        .config-input {\n            width: 100%;\n            padding: 8px;\n            margin: 5px 0;\n            border: 1px solid rgba(255, 255, 255, 0.3);\n            border-radius: 5px;\n            background: rgba(255, 255, 255, 0.1);\n            color: white;\n            font-size: 14px;\n        }\n        .config-input::placeholder {\n            color: rgba(255, 255, 255, 0.6);\n        }\n\n        .stats {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 15px;\n            margin-top: 20px;\n            font-size: 12px;\n        }\n\n        .stat-item {\n            display: flex;\n            justify-content: space-between;\n            margin: 5px 0;\n        }\n\n        .current-transcript {\n            background: rgba(255, 193, 7, 0.2);\n            border: 1px solid #ffc107;\n            border-radius: 8px;\n            padding: 10px;\n            margin: 10px 0;\n            font-style: italic;\n            min-height: 40px;\n        }\n\n        @media (max-width: 1200px) {\n            .container {\n                grid-template-columns: 1fr;\n                grid-template-rows: auto 1fr;\n            }\n            .side-panel {\n                order: -1;\n                height: auto;\n                max-height: 300px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"main-panel\">\n            <h1>🎤 Generic WebRTC + MCP Demo</h1>\n            \n            <div id=\"connectionStatus\" class=\"status connecting\">\n                🔄 Ready to connect...\n            </div>\n\n            <div class=\"controls\">\n                <button id=\"connectBtn\" onclick=\"connect()\">🔗 Connect</button>\n                <button id=\"disconnectBtn\" onclick=\"disconnect()\" disabled>⏹️ Disconnect</button>\n                <button id=\"loadToolsBtn\" onclick=\"loadTools()\" disabled>🔧 Load Tools</button>\n                <button id=\"clearBtn\" onclick=\"clearTranscript()\">🗑️ Clear</button>\n            </div>\n\n            <div class=\"voice-controls\">\n                <div id=\"connectionIndicator\" class=\"connection-indicator\">🎤</div>\n                <div id=\"voiceStatus\">Configure server URL and click Connect</div>\n                \n                <div class=\"audio-level\">\n                    <div>Audio Level:</div>\n                    <div class=\"audio-bar\">\n                        <div id=\"audioFill\" class=\"audio-fill\"></div>\n                    </div>\n                    <div id=\"audioLevel\">0%</div>\n                </div>\n            </div>\n\n            <div class=\"current-transcript\">\n                <strong>Current Speech:</strong>\n                <div id=\"currentTranscript\">Start speaking...</div>\n            </div>\n\n            <div class=\"transcript-container\">\n                <h3>Conversation Transcript</h3>\n                <div class=\"transcript\" id=\"transcript\">\n                    <div class=\"transcript-entry system\">\n                        <div class=\"transcript-header\">\n                            <span>System</span>\n                            <span id=\"startTime\"></span>\n                        </div>\n                        <div class=\"transcript-content\">🚀 Generic WebRTC + MCP Demo ready!</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"side-panel\">\n            <div class=\"config-section\">\n                <h3>🔧 Configuration</h3>\n                <input type=\"text\" id=\"serverUrl\" class=\"config-input\" \n                       placeholder=\"Bridge Server URL (e.g., http://localhost:8084)\" \n                       value=\"${serverUrl}\">\n                <input type=\"text\" id=\"modelName\" class=\"config-input\" \n                       placeholder=\"Model (e.g., gpt-4o-realtime-preview-2024-12-17)\" \n                       value=\"${modelName}\">\n            </div>\n\n            <div class=\"tools-section\">\n                <h3>🛠️ Available Tools (<span id=\"toolCount\">0</span>)</h3>\n                <div class=\"tools-list\" id=\"toolsList\">\n                    <div style=\"text-align: center; color: rgba(255,255,255,0.6);\">\n                        Click \"Load Tools\" to discover available MCP tools\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"stats\">\n                <h4>📊 Session Stats</h4>\n                <div class=\"stat-item\">\n                    <span>Connection:</span>\n                    <span id=\"connectionTime\">Not connected</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span>Messages:</span>\n                    <span id=\"messageCount\">0</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span>Function Calls:</span>\n                    <span id=\"functionCallCount\">0</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span>Audio Level:</span>\n                    <span id=\"audioLevelText\">0%</span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <audio id=\"audioElement\" autoplay style=\"display: none;\"></audio>\n\n    <script>\n        // Polyfill for Node.js globals in browser environment\n        if (typeof process === 'undefined') {\n            window.process = { env: {} };\n        }\n        \n        let pc = null;\n        let dataChannel = null;\n        let audioStream = null;\n        let audioContext = null;\n        let analyser = null;\n        let serverUrl = '${serverUrl}';\n        let connectionStartTime = null;\n        let messageCount = 0;\n        let functionCallCount = 0;\n        let currentTranscriptText = '';\n\n        // Initialize\n        document.getElementById('startTime').textContent = new Date().toLocaleTimeString();\n\n        // Automatically load tools when page loads\n        window.addEventListener('load', () => {\n            loadTools();\n        });\n\n        function addTranscriptEntry(type, content, metadata = {}) {\n            const transcript = document.getElementById('transcript');\n            const entry = document.createElement('div');\n            entry.className = \\`transcript-entry \\${type}\\`;\n            \n            const header = document.createElement('div');\n            header.className = 'transcript-header';\n            header.innerHTML = \\`\n                <span>\\${type.charAt(0).toUpperCase() + type.slice(1)}</span>\n                <span>\\${new Date().toLocaleTimeString()}</span>\n            \\`;\n            \n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'transcript-content';\n            contentDiv.textContent = content;\n            \n            entry.appendChild(header);\n            entry.appendChild(contentDiv);\n            transcript.appendChild(entry);\n            transcript.scrollTop = transcript.scrollHeight;\n            \n            messageCount++;\n            document.getElementById('messageCount').textContent = messageCount;\n        }\n\n        function updateStatus(message, type) {\n            const status = document.getElementById('connectionStatus');\n            status.textContent = message;\n            status.className = \\`status \\${type}\\`;\n        }\n\n        function updateVoiceStatus(message) {\n            document.getElementById('voiceStatus').textContent = message;\n        }\n\n        function updateConnectionIndicator(state) {\n            const indicator = document.getElementById('connectionIndicator');\n            indicator.className = \\`connection-indicator \\${state}\\`;\n        }\n\n        function updateCurrentTranscript(text) {\n            document.getElementById('currentTranscript').textContent = text || 'Start speaking...';\n            currentTranscriptText = text || '';\n        }\n\n        async function connect() {\n            try {\n                serverUrl = document.getElementById('serverUrl').value || '${serverUrl}';\n                const model = document.getElementById('modelName').value || '${modelName}';\n                \n                updateStatus('🔑 Getting ephemeral API key...', 'connecting');\n                addTranscriptEntry('system', \\`Connecting to \\${serverUrl}...\\`);\n\n                // Get ephemeral API key\n                const tokenResponse = await fetch(\\`\\${serverUrl}/session\\`);\n                if (!tokenResponse.ok) {\n                    throw new Error(\\`Failed to get ephemeral key: \\${tokenResponse.status}\\`);\n                }\n                const sessionData = await tokenResponse.json();\n                const ephemeralKey = sessionData.client_secret.value;\n                addTranscriptEntry('system', '✅ Got ephemeral API key');\n\n                updateStatus('🔄 Creating WebRTC connection...', 'connecting');\n\n                // Create WebRTC peer connection\n                pc = new RTCPeerConnection();\n\n                // Set up audio playback\n                const audioEl = document.getElementById('audioElement');\n                pc.ontrack = e => {\n                    addTranscriptEntry('system', '📻 Received audio track from AI');\n                    audioEl.srcObject = e.streams[0];\n                };\n\n                // Add microphone\n                audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                pc.addTrack(audioStream.getTracks()[0]);\n                addTranscriptEntry('system', '🎤 Added microphone audio track');\n\n                // Set up audio level monitoring\n                setupAudioLevelMonitoring(audioStream);\n\n                // Set up data channel\n                dataChannel = pc.createDataChannel(\"oai-events\");\n                dataChannel.addEventListener(\"message\", handleRealtimeEvent);\n                dataChannel.addEventListener(\"open\", () => {\n                    addTranscriptEntry('system', '📡 Data channel opened');\n                    updateConnectionIndicator('connected');\n                    updateVoiceStatus('🎉 Connected! Start talking...');\n                    connectionStartTime = new Date();\n                    updateConnectionTime();\n                    \n                    // Configure tools after connection is established\n                    configureToolsForSession();\n                });\n\n                // Create offer and connect\n                const offer = await pc.createOffer();\n                await pc.setLocalDescription(offer);\n                addTranscriptEntry('system', '📤 Created WebRTC offer');\n\n                updateStatus('🌐 Connecting to OpenAI Realtime API...', 'connecting');\n                const sdpResponse = await fetch(\\`https://api.openai.com/v1/realtime?model=\\${model}\\`, {\n                    method: \"POST\",\n                    body: offer.sdp,\n                    headers: {\n                        Authorization: \\`Bearer \\${ephemeralKey}\\`,\n                        \"Content-Type\": \"application/sdp\"\n                    },\n                });\n\n                if (!sdpResponse.ok) {\n                    throw new Error(\\`WebRTC connection failed: \\${sdpResponse.status}\\`);\n                }\n\n                const answerSdp = await sdpResponse.text();\n                await pc.setRemoteDescription({ type: \"answer\", sdp: answerSdp });\n\n                addTranscriptEntry('system', '✅ WebRTC connection established');\n                updateStatus('✅ Connected! Voice conversation active', 'connected');\n\n                // Update UI\n                document.getElementById('connectBtn').disabled = true;\n                document.getElementById('disconnectBtn').disabled = false;\n                document.getElementById('loadToolsBtn').disabled = false;\n\n            } catch (error) {\n                addTranscriptEntry('error', \\`Connection failed: \\${error.message}\\`);\n                updateStatus('❌ Connection failed', 'error');\n                console.error('Connection error:', error);\n            }\n        }\n\n        function setupAudioLevelMonitoring(stream) {\n            audioContext = new AudioContext();\n            analyser = audioContext.createAnalyser();\n            const source = audioContext.createMediaStreamSource(stream);\n            source.connect(analyser);\n\n            analyser.fftSize = 256;\n            const bufferLength = analyser.frequencyBinCount;\n            const dataArray = new Uint8Array(bufferLength);\n\n            function updateAudioLevel() {\n                if (!analyser) return;\n                \n                analyser.getByteFrequencyData(dataArray);\n                const average = dataArray.reduce((a, b) => a + b) / bufferLength;\n                const percentage = Math.round((average / 255) * 100);\n                \n                document.getElementById('audioFill').style.width = \\`\\${percentage}%\\`;\n                document.getElementById('audioLevel').textContent = \\`\\${percentage}%\\`;\n                document.getElementById('audioLevelText').textContent = \\`\\${percentage}%\\`;\n                \n                requestAnimationFrame(updateAudioLevel);\n            }\n            updateAudioLevel();\n        }\n\n        function handleRealtimeEvent(event) {\n            try {\n                const data = JSON.parse(event.data);\n                \n                switch (data.type) {\n                    case 'session.created':\n                        addTranscriptEntry('system', '🎉 AI session created');\n                        break;\n                        \n                    case 'session.updated':\n                        addTranscriptEntry('system', '🔄 AI session updated');\n                        break;\n                        \n                    case 'input_audio_buffer.speech_started':\n                        addTranscriptEntry('system', '🎤 Speech detected');\n                        updateConnectionIndicator('talking');\n                        updateVoiceStatus('🎤 Listening...');\n                        updateCurrentTranscript('');\n                        break;\n                        \n                    case 'input_audio_buffer.speech_stopped':\n                        addTranscriptEntry('system', '🛑 Speech ended');\n                        updateConnectionIndicator('connected');\n                        updateVoiceStatus('🤔 Processing...');\n                        if (currentTranscriptText) {\n                            addTranscriptEntry('user', currentTranscriptText);\n                            updateCurrentTranscript('');\n                        }\n                        break;\n                        \n                    case 'conversation.item.input_audio_transcription.delta':\n                        if (data.delta) {\n                            updateCurrentTranscript(currentTranscriptText + data.delta);\n                        }\n                        break;\n                        \n                    case 'conversation.item.input_audio_transcription.completed':\n                        if (data.transcript) {\n                            updateCurrentTranscript(data.transcript);\n                        }\n                        break;\n                        \n                    case 'response.created':\n                        addTranscriptEntry('system', '🚀 AI response started');\n                        break;\n                        \n                    case 'response.text.delta':\n                        if (data.delta) {\n                            addTranscriptEntry('assistant', data.delta);\n                        }\n                        break;\n                        \n                    case 'response.function_call_arguments.delta':\n                        addTranscriptEntry('system', \\`🛠️ Function call args: \\${data.delta}\\`);\n                        break;\n                        \n                    case 'response.function_call_arguments.done':\n                        functionCallCount++;\n                        document.getElementById('functionCallCount').textContent = functionCallCount;\n                        addTranscriptEntry('system', \\`🛠️ Function call: \\${data.name}(\\${data.arguments})\\`);\n                        handleFunctionCall(data);\n                        break;\n                        \n                    case 'response.done':\n                        updateVoiceStatus('🎉 Ready for next question...');\n                        addTranscriptEntry('system', '✅ Response completed');\n                        break;\n                        \n                    case 'error':\n                        addTranscriptEntry('error', \\`AI Error: \\${data.error?.message || 'Unknown error'}\\`);\n                        break;\n                        \n                    default:\n                        if (data.type.includes('function') || data.type.includes('tool')) {\n                            addTranscriptEntry('system', \\`🛠️ \\${data.type}\\`);\n                        }\n                }\n            } catch (error) {\n                console.error('Error parsing realtime event:', error);\n                addTranscriptEntry('error', \\`Parse error: \\${error.message}\\`);\n            }\n        }\n\n        async function handleFunctionCall(functionCallData) {\n            const functionName = functionCallData.name;\n            const argumentsStr = functionCallData.arguments;\n            \n            try {\n                const functionArgs = JSON.parse(argumentsStr);\n                const mcpToolName = functionName;\n                \n                addTranscriptEntry('system', \\`📡 Calling MCP tool: \\${mcpToolName}\\`);\n                \n                const mcpRequest = {\n                    jsonrpc: '2.0',\n                    method: 'tools/call',\n                    params: {\n                        name: mcpToolName,\n                        arguments: functionArgs\n                    },\n                    id: \\`func-\\${Date.now()}\\`\n                };\n                \n                const response = await fetch(\\`\\${serverUrl}/mcp\\`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(mcpRequest)\n                });\n\n                if (!response.ok) {\n                    throw new Error(\\`MCP API error: \\${response.status}\\`);\n                }\n\n                const result = await response.json();\n                \n                if (result.error) {\n                    throw new Error(result.error.message || 'MCP function call failed');\n                }\n\n                addTranscriptEntry('system', \\`✅ MCP response received for \\${functionName}\\`);\n\n                // Send result back to AI\n                const functionResult = {\n                    type: 'conversation.item.create',\n                    item: {\n                        type: 'function_call_output',\n                        call_id: functionCallData.call_id,\n                        output: JSON.stringify(result.result || result)\n                    }\n                };\n\n                dataChannel.send(JSON.stringify(functionResult));\n                \n                setTimeout(() => {\n                    dataChannel.send(JSON.stringify({ type: 'response.create' }));\n                }, 100);\n\n            } catch (error) {\n                console.error('Function call error:', error);\n                addTranscriptEntry('error', \\`Function call failed: \\${error.message}\\`);\n\n                const errorResult = {\n                    type: 'conversation.item.create',\n                    item: {\n                        type: 'function_call_output',\n                        call_id: functionCallData.call_id,\n                        output: JSON.stringify({\n                            error: error.message,\n                            success: false\n                        })\n                    }\n                };\n\n                dataChannel.send(JSON.stringify(errorResult));\n            }\n        }\n\n        async function loadTools() {\n            try {\n                const isInitialLoad = document.getElementById('toolCount').textContent === '0';\n                if (isInitialLoad) {\n                    addTranscriptEntry('system', '🔧 Loading available tools...');\n                }\n                \n                const response = await fetch(\\`\\${serverUrl}/mcp\\`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        jsonrpc: '2.0',\n                        method: 'tools/list',\n                        params: {},\n                        id: 'tools-' + Date.now()\n                    })\n                });\n\n                if (!response.ok) {\n                    throw new Error(\\`Failed to load tools: \\${response.status}\\`);\n                }\n\n                const result = await response.json();\n                const tools = result.result?.tools || [];\n                \n                document.getElementById('toolCount').textContent = tools.length;\n                \n                const toolsList = document.getElementById('toolsList');\n                if (tools.length === 0) {\n                    toolsList.innerHTML = '<div style=\"text-align: center; color: rgba(255,255,255,0.6);\">No tools available</div>';\n                } else {\n                    toolsList.innerHTML = tools.map(tool => \\`\n                        <div class=\"tool-item\">\n                            <div class=\"tool-name\">\\${tool.name}</div>\n                            <div class=\"tool-description\">\\${tool.description || 'No description'}</div>\n                        </div>\n                    \\`).join('');\n                }\n                \n                if (isInitialLoad) {\n                    addTranscriptEntry('system', \\`✅ Loaded \\${tools.length} tools (will be auto-configured for AI)\\`);\n                }\n                \n            } catch (error) {\n                addTranscriptEntry('error', \\`Failed to load tools: \\${error.message}\\`);\n            }\n        }\n\n        function disconnect() {\n            addTranscriptEntry('system', '🔌 Disconnecting...');\n\n            if (dataChannel) {\n                dataChannel.close();\n                dataChannel = null;\n            }\n\n            if (pc) {\n                pc.close();\n                pc = null;\n            }\n\n            if (audioStream) {\n                audioStream.getTracks().forEach(track => track.stop());\n                audioStream = null;\n            }\n\n            if (audioContext) {\n                audioContext.close();\n                audioContext = null;\n                analyser = null;\n            }\n\n            updateStatus('🔌 Disconnected', 'connecting');\n            updateVoiceStatus('Configure server URL and click Connect');\n            updateConnectionIndicator('');\n            updateCurrentTranscript('');\n            \n            document.getElementById('connectBtn').disabled = false;\n            document.getElementById('disconnectBtn').disabled = true;\n            document.getElementById('loadToolsBtn').disabled = true;\n            \n            connectionStartTime = null;\n            document.getElementById('connectionTime').textContent = 'Not connected';\n\n            addTranscriptEntry('system', '✅ Disconnected successfully');\n        }\n\n        function clearTranscript() {\n            document.getElementById('transcript').innerHTML = \\`\n                <div class=\"transcript-entry system\">\n                    <div class=\"transcript-header\">\n                        <span>System</span>\n                        <span>\\${new Date().toLocaleTimeString()}</span>\n                    </div>\n                    <div class=\"transcript-content\">🗑️ Transcript cleared</div>\n                </div>\n            \\`;\n            messageCount = 0;\n            functionCallCount = 0;\n            document.getElementById('messageCount').textContent = '0';\n            document.getElementById('functionCallCount').textContent = '0';\n        }\n\n        function updateConnectionTime() {\n            if (connectionStartTime) {\n                const elapsed = Math.floor((new Date() - connectionStartTime) / 1000);\n                const minutes = Math.floor(elapsed / 60);\n                const seconds = elapsed % 60;\n                document.getElementById('connectionTime').textContent = \n                    \\`\\${minutes}:\\${seconds.toString().padStart(2, '0')}\\`;\n            }\n            setTimeout(updateConnectionTime, 1000);\n        }\n\n        // Cleanup on page unload\n        window.addEventListener('beforeunload', disconnect);\n\n        async function configureToolsForSession() {\n            try {\n                addTranscriptEntry('system', '🛠️ Configuring MCP tools for AI session...');\n                \n                const response = await fetch(\\`\\${serverUrl}/tools\\`);\n                if (!response.ok) {\n                    throw new Error(\\`Failed to get tools: \\${response.status}\\`);\n                }\n                \n                const toolsData = await response.json();\n                const tools = toolsData.tools || [];\n                \n                if (tools.length > 0) {\n                    // Update session with tools\n                    const sessionUpdate = {\n                        type: 'session.update',\n                        session: {\n                            modalities: ['text', 'audio'],\n                            instructions: toolsData.instructions || 'You are a helpful assistant with access to external tools.',\n                            voice: '${modelName}'.includes('alloy') ? 'alloy' : 'alloy',\n                            tools: tools,\n                            tool_choice: 'auto',\n                            turn_detection: {\n                                type: 'server_vad',\n                                threshold: 0.5,\n                                prefix_padding_ms: 300,\n                                silence_duration_ms: 500,\n                                create_response: true,\n                                interrupt_response: true,\n                            },\n                        }\n                    };\n                    \n                    dataChannel.send(JSON.stringify(sessionUpdate));\n                    addTranscriptEntry('system', \\`✅ Configured \\${tools.length} MCP tools for AI\\`);\n                } else {\n                    addTranscriptEntry('system', '⚠️ No MCP tools available');\n                }\n            } catch (error) {\n                console.error('Failed to configure tools:', error);\n                addTranscriptEntry('error', \\`Failed to configure tools: \\${error.message}\\`);\n            }\n        }\n\n        \n    </script>\n</body>\n</html>`;\n  }\n\n  private sanitizeFunctionName(originalName: string): string {\n    // Check if we already have a mapping for this tool\n    if (this.mcpToolToFunctionName.has(originalName)) {\n      return this.mcpToolToFunctionName.get(originalName)!;\n    }\n\n    // Convert MCP tool names to valid OpenAI function names (camelCase)\n    // OpenAI Realtime API prefers camelCase over underscores\n    let sanitized = originalName\n      // Replace non-alphanumeric characters with spaces for proper camelCase conversion\n      .replace(/[^a-zA-Z0-9]/g, ' ')\n      // Split into words and convert to camelCase\n      .split(/\\s+/)\n      .filter(word => word.length > 0)\n      .map((word, index) => {\n        if (index === 0) {\n          // First word: lowercase\n          return word.toLowerCase();\n        } else {\n          // Subsequent words: capitalize first letter\n          return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        }\n      })\n      .join('');\n\n    // Ensure starts with letter (if it doesn't, prepend 'fn')\n    if (!/^[a-zA-Z]/.test(sanitized)) {\n      sanitized = 'fn' + sanitized.charAt(0).toUpperCase() + sanitized.slice(1);\n    }\n\n    // Limit to 64 characters\n    if (sanitized.length > 64) {\n      sanitized = sanitized.substring(0, 64);\n    }\n\n    // Handle edge case where name might be empty or too short\n    if (sanitized.length === 0) {\n      sanitized = 'unknownTool';\n    }\n\n    // Ensure uniqueness by adding suffix if needed\n    let finalName = sanitized;\n    let counter = 1;\n    while (this.functionNameToMCPTool.has(finalName)) {\n      const suffix = counter.toString();\n      const maxBaseLength = 64 - suffix.length;\n      finalName = sanitized.substring(0, maxBaseLength) + suffix;\n      counter++;\n    }\n\n    // Store bidirectional mapping\n    this.functionNameToMCPTool.set(finalName, originalName);\n    this.mcpToolToFunctionName.set(originalName, finalName);\n\n    return finalName;\n  }\n\n  private getOriginalMCPToolName(functionName: string): string {\n    return this.functionNameToMCPTool.get(functionName) || functionName;\n  }\n\n  private convertMCPSchemaToOpenAI(schema: any): any {\n    if (!schema || typeof schema !== 'object') {\n      return {\n        type: 'object',\n        properties: {},\n        required: [],\n        additionalProperties: false\n      };\n    }\n\n    const converted: any = {\n      type: 'object',\n      properties: {},\n      required: [],\n      additionalProperties: false  // Required for strict mode\n    };\n\n    // Convert properties if they exist\n    if (schema.properties && typeof schema.properties === 'object') {\n      const propertyNames = Object.keys(schema.properties);\n      \n      // Convert each property\n      for (const [key, value] of Object.entries(schema.properties)) {\n        converted.properties[key] = this.convertProperty(value as any);\n      }\n      \n      // For strict mode, ALL properties must be in required array\n      // Use existing required array or default to all properties\n      if (schema.required && Array.isArray(schema.required)) {\n        converted.required = schema.required.filter((req: string) => propertyNames.includes(req));\n      } else {\n        // If no required specified, make all properties required for strict mode\n        converted.required = propertyNames;\n      }\n    }\n\n    return converted;\n  }\n\n  private convertProperty(property: any): any {\n    if (!property || typeof property !== 'object') {\n      return { type: 'string' };\n    }\n\n    const converted: any = { ...property };\n\n    // Ensure we have a valid type\n    if (!converted.type) {\n      converted.type = 'string';\n    }\n\n    // Handle arrays - ensure they have proper items schema\n    if (converted.type === 'array') {\n      if (!converted.items) {\n        converted.items = { type: 'string' };\n      } else {\n        converted.items = this.convertProperty(converted.items);\n      }\n    }\n\n    // Handle objects - recursively convert properties and ensure strict mode compliance\n    if (converted.type === 'object') {\n      if (converted.properties) {\n        converted.properties = this.convertProperties(converted.properties);\n        \n        // Ensure additionalProperties is false for strict mode\n        converted.additionalProperties = false;\n        \n        // Ensure all properties are required for strict mode\n        if (!converted.required) {\n          converted.required = Object.keys(converted.properties);\n        }\n      } else {\n        // Object with no properties defined\n        converted.properties = {};\n        converted.required = [];\n        converted.additionalProperties = false;\n      }\n    }\n\n    // Handle enums - ensure they are properly formatted\n    if (converted.enum && Array.isArray(converted.enum)) {\n      // Keep enum as-is, it's valid in OpenAI schema\n    }\n\n    // Remove any unsupported fields that might cause issues\n    delete converted.examples;\n    delete converted.default;\n\n    return converted;\n  }\n\n  private convertProperties(properties: any): any {\n    const converted: any = {};\n\n    for (const [key, value] of Object.entries(properties)) {\n      converted[key] = this.convertProperty(value);\n    }\n\n    return converted;\n  }\n} ","import { z } from 'zod';\n\n/**\n * Authentication configuration for MCP servers\n */\nexport const AuthConfigSchema = z.object({\n  type: z.literal('bearer'),\n  token: z.string().min(1, 'Token is required'),\n  header: z.string().optional().default('Authorization'),\n});\n\nexport type AuthConfig = z.infer<typeof AuthConfigSchema>;\n\n/**\n * OpenAI Realtime API configuration\n */\nexport const OpenAIConfigSchema = z.object({\n  apiKey: z.string().min(1, 'OpenAI API key is required'),\n  model: z.string().default('gpt-4o-realtime-preview'),\n  instructions: z.string().optional(),\n  voice: z.enum(['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse']).optional().default('alloy'),\n});\n\nexport type OpenAIConfig = z.infer<typeof OpenAIConfigSchema>;\n\n/**\n * MCP server configuration\n */\nexport const MCPConfigSchema = z.object({\n  url: z.string().url('Valid MCP server URL is required'),\n  auth: AuthConfigSchema.optional(),\n  timeout: z.number().positive().default(10000),\n});\n\nexport type MCPConfig = z.infer<typeof MCPConfigSchema>;\n\n/**\n * Main proxy configuration following our simplified approach\n */\nexport const ProxyConfigSchema = z.object({\n  openai: OpenAIConfigSchema,\n  mcp: MCPConfigSchema,\n  settings: z.object({\n    logLevel: z.enum(['debug', 'info', 'warn', 'error']).default('info'),\n    retryAttempts: z.number().nonnegative().default(3),\n    retryDelay: z.number().positive().default(1000),\n  }).optional().default({}),\n});\n\nexport type ProxyConfig = z.infer<typeof ProxyConfigSchema>;\n\n/**\n * Connection states for the proxy\n */\nexport enum ConnectionState {\n  DISCONNECTED = 'disconnected',\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  RECONNECTING = 'reconnecting',\n  ERROR = 'error',\n}\n\n/**\n * Proxy events for monitoring and debugging\n */\nexport interface ProxyEvents {\n  stateChange: (state: ConnectionState) => void;\n  error: (error: Error) => void;\n  functionCall: (functionName: string, args: unknown) => void;\n  functionResult: (functionName: string, result: unknown) => void;\n  mcpConnect: () => void;\n  mcpDisconnect: () => void;\n  realtimeConnect: () => void;\n  realtimeDisconnect: () => void;\n} ","import WebSocket from 'ws';\nimport type {\n  RealtimeServerEvent,\n  RealtimeClientEvent,\n  RealtimeTool,\n  RealtimeSession,\n  SessionUpdateEvent,\n  ConversationItemCreateEvent,\n  ResponseFunctionCallArgumentsDoneEvent,\n  OpenAIConfig,\n} from '../types/index.js';\n\n/**\n * Event handlers for Realtime API events\n */\nexport interface RealtimeEventHandlers {\n  onSessionCreated?: () => void;\n  onSessionUpdated?: () => void;\n  onFunctionCall?: (event: ResponseFunctionCallArgumentsDoneEvent) => Promise<void>;\n  onError?: (error: Error) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}\n\n/**\n * Get the default session configuration optimized for voice interactions\n */\nexport function getDefaultSessionConfig(): Partial<RealtimeSession> {\n  return {\n    modalities: ['text', 'audio'],\n    voice: 'alloy',\n    tool_choice: 'auto',\n    // Voice interface optimizations\n    speed: 1.2, // Optimal speed - fast but not hurried  \n    temperature: 0.7, // Slightly lower for more consistent, professional responses\n    input_audio_transcription: {\n      model: 'whisper-1' // Enable transcription for better UX\n    },\n    turn_detection: {\n      type: 'server_vad',\n      threshold: 0.5,\n      prefix_padding_ms: 300,\n      silence_duration_ms: 400, // Slightly faster response time\n      create_response: true,\n      interrupt_response: true,\n    },\n  };\n}\n\n/**\n * WebSocket connection manager for OpenAI's Realtime API\n * Handles the core WebSocket communication following our simplified approach\n */\nexport class RealtimeConnection {\n  private ws: WebSocket | null = null;\n  private readonly config: OpenAIConfig;\n  private readonly handlers: RealtimeEventHandlers;\n  private isConnecting = false;\n  private isConnected = false;\n  private eventQueue: RealtimeClientEvent[] = [];\n\n  constructor(config: OpenAIConfig, handlers: RealtimeEventHandlers = {}) {\n    this.config = config;\n    this.handlers = handlers;\n  }\n\n  /**\n   * Connect to the OpenAI Realtime API\n   * @param tools - Optional array of tools to configure in the session\n   */\n  async connect(tools?: RealtimeTool[]): Promise<void> {\n    if (this.isConnected || this.isConnecting) {\n      return;\n    }\n\n    this.isConnecting = true;\n\n    try {\n      const url = `wss://api.openai.com/v1/realtime?model=${encodeURIComponent(this.config.model)}`;\n      \n      this.ws = new WebSocket(url, {\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'OpenAI-Beta': 'realtime=v1',\n        },\n      });\n\n      await this.setupWebSocket();\n      \n      // Configure session with tools if provided\n      if (tools && tools.length > 0) {\n        await this.updateSession(tools);\n      }\n\n      this.isConnected = true;\n      this.isConnecting = false;\n      this.handlers.onConnect?.();\n    } catch (error) {\n      this.isConnecting = false;\n      this.isConnected = false;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown connection error';\n      this.handlers.onError?.(new Error(`Failed to connect to Realtime API: ${errorMessage}`));\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from the Realtime API\n   */\n  async disconnect(): Promise<void> {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.isConnected = false;\n    this.isConnecting = false;\n    this.handlers.onDisconnect?.();\n  }\n\n  /**\n   * Update the session configuration with tools\n   * @param tools - Array of Realtime tools to configure\n   */\n  async updateSession(tools: RealtimeTool[]): Promise<void> {\n    const session: Partial<RealtimeSession> = {\n      ...getDefaultSessionConfig(),\n      voice: this.config.voice, // Allow voice override from config\n      tools,\n    };\n\n    // Combine user instructions with voice-specific guidance\n    if (this.config.instructions) {\n      const voiceGuidance = `\n\nVOICE INTERFACE GUIDANCE & PERSONALITY:\nYou are having a voice conversation that will be read aloud over audio, and you should embody the personality of Jarvis from Iron Man - a sophisticated, witty, and highly capable AI assistant.\n\nPERSONALITY TRAITS:\n- Speak with sophisticated eloquence and confidence, like a well-educated British butler with advanced technical knowledge\n- Use occasional dry wit and subtle humor when appropriate\n- Be efficient and precise - get to the point while maintaining charm\n- Show quiet confidence in your abilities without being arrogant\n- Use slightly formal but warm language (e.g., \"Certainly, sir/madam\" or \"I've located the information you requested\")\n- Occasionally use refined vocabulary and British-influenced phrasing\n- Be helpful and anticipate needs, like a truly advanced AI assistant would\n\nVOICE-SPECIFIC GUIDELINES:\n- Avoid reading out URLs, file paths, or other text that would be unnatural to say aloud\n- Be concise and conversational - voice interactions work best with shorter, more natural responses\n- Don't include formatting like bullet points or numbered lists in your speech\n- If you need to reference specific data, describe it naturally rather than reading it verbatim\n- Focus on the key information that would be most helpful to hear\n- Speak as if you're an advanced AI assistant having a sophisticated conversation\n\n`;\n      \n      session.instructions = this.config.instructions + voiceGuidance;\n    }\n\n    const sessionUpdate: SessionUpdateEvent = {\n      type: 'session.update',\n      session,\n    };\n\n    this.sendEvent(sessionUpdate);\n  }\n\n  /**\n   * Send a function call result back to the Realtime API\n   * @param callId - The function call ID from the original function call event\n   * @param result - The result from the MCP tool execution\n   */\n  sendFunctionResponse(callId: string, result: string): void {\n    const response: ConversationItemCreateEvent = {\n      type: 'conversation.item.create',\n      item: {\n        type: 'function_call_output',\n        call_id: callId,\n        output: result,\n      },\n    };\n\n    this.sendEvent(response);\n  }\n\n  /**\n   * Check if the connection is active\n   */\n  isConnectionActive(): boolean {\n    return this.isConnected && this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  /**\n   * Send an event to the Realtime API\n   * @param event - The client event to send\n   */\n  private sendEvent(event: RealtimeClientEvent): void {\n    if (!this.isConnectionActive()) {\n      // Queue events if not connected\n      this.eventQueue.push(event);\n      return;\n    }\n\n    try {\n      this.ws!.send(JSON.stringify(event));\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown send error';\n      this.handlers.onError?.(new Error(`Failed to send event: ${errorMessage}`));\n    }\n  }\n\n  /**\n   * Set up WebSocket event handlers\n   */\n  private async setupWebSocket(): Promise<void> {\n    if (!this.ws) {\n      throw new Error('WebSocket not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.ws) {\n        reject(new Error('WebSocket not initialized'));\n        return;\n      }\n\n      this.ws.onopen = () => {\n        // Send any queued events\n        while (this.eventQueue.length > 0) {\n          const event = this.eventQueue.shift();\n          if (event) {\n            this.sendEvent(event);\n          }\n        }\n        resolve();\n      };\n\n      this.ws.onmessage = (event: WebSocket.MessageEvent) => {\n        this.handleServerEvent(event.data.toString());\n      };\n\n      this.ws.onerror = (error: WebSocket.ErrorEvent) => {\n        const errorMessage = 'message' in error ? error.message : 'WebSocket error';\n        reject(new Error(errorMessage));\n      };\n\n      this.ws.onclose = (event: WebSocket.CloseEvent) => {\n        this.isConnected = false;\n        this.isConnecting = false;\n        \n        if (!event.wasClean) {\n          this.handlers.onError?.(new Error(`WebSocket closed unexpectedly: ${event.code} ${event.reason}`));\n        }\n        \n        this.handlers.onDisconnect?.();\n      };\n    });\n  }\n\n  /**\n   * Handle incoming server events from the Realtime API\n   * @param data - Raw event data from the WebSocket\n   */\n  private handleServerEvent(data: string): void {\n    try {\n      const event = JSON.parse(data) as RealtimeServerEvent;\n\n      switch (event.type) {\n        case 'session.created':\n          this.handlers.onSessionCreated?.();\n          break;\n          \n        case 'session.updated':\n          this.handlers.onSessionUpdated?.();\n          break;\n          \n        case 'response.function_call_arguments.done':\n          // This is the key event for our proxy - a function call from the AI\n          this.handlers.onFunctionCall?.(event);\n          break;\n          \n        case 'error':\n          this.handlers.onError?.(new Error(`Realtime API error: ${event.error.message}`));\n          break;\n          \n        default:\n          // Log other events for debugging but don't handle them\n          // In a full implementation, we might want to handle more events\n          break;\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown parsing error';\n      this.handlers.onError?.(new Error(`Failed to parse server event: ${errorMessage}`));\n    }\n  }\n} ","import type {\n  ProxyConfig,\n  ProxyEvents,\n  MCPTool,\n  RealtimeTool,\n  ResponseFunctionCallArgumentsDoneEvent,\n} from './types/index.js';\nimport { ProxyConfigSchema, ConnectionState } from './types/index.js';\nimport { MCPClient } from './mcp/client.js';\nimport { RealtimeConnection, type RealtimeEventHandlers } from './realtime/connection.js';\n\n/**\n * Event emitter interface for proxy events\n */\ninterface EventEmitter {\n  emit<K extends keyof ProxyEvents>(event: K, ...args: Parameters<ProxyEvents[K]>): void;\n  on<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void;\n  off<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void;\n}\n\n/**\n * Simple event emitter implementation\n */\nclass SimpleEventEmitter implements EventEmitter {\n  private listeners: Map<string, Function[]> = new Map();\n\n  emit<K extends keyof ProxyEvents>(event: K, ...args: Parameters<ProxyEvents[K]>): void {\n    const eventListeners = this.listeners.get(event as string) || [];\n    for (const listener of eventListeners) {\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(`Error in event listener for ${event as string}:`, error);\n      }\n    }\n  }\n\n  on<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void {\n    const eventName = event as string;\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n    this.listeners.get(eventName)!.push(listener);\n  }\n\n  off<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void {\n    const eventName = event as string;\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(listener);\n      if (index !== -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n}\n\n/**\n * Main proxy class that bridges OpenAI's Realtime API with MCP servers\n * Implements our simplified approach for maximum developer experience\n */\nexport class RealtimeMCPProxy {\n  private readonly config: ProxyConfig;\n  private readonly events = new SimpleEventEmitter();\n  private mcpClient: MCPClient | null = null;\n  private realtimeConnection: RealtimeConnection | null = null;\n  private currentState: ConnectionState = ConnectionState.DISCONNECTED;\n  private mcpTools: MCPTool[] = [];\n\n  constructor(config: ProxyConfig) {\n    // Validate configuration using Zod schema\n    const validationResult = ProxyConfigSchema.safeParse(config);\n    if (!validationResult.success) {\n      throw new Error(`Invalid configuration: ${validationResult.error.message}`);\n    }\n    \n    this.config = validationResult.data;\n  }\n\n  /**\n   * Connect to both MCP server and Realtime API\n   * Auto-discovers tools and sets up function call routing\n   */\n  async connect(): Promise<void> {\n    if (this.currentState !== ConnectionState.DISCONNECTED) {\n      throw new Error(`Cannot connect: current state is ${this.currentState}`);\n    }\n\n    this.setState(ConnectionState.CONNECTING);\n\n    try {\n      // Step 1: Connect to MCP server and discover tools\n      await this.connectToMCP();\n\n      // Step 2: Connect to Realtime API with discovered tools\n      await this.connectToRealtime();\n\n      this.setState(ConnectionState.CONNECTED);\n    } catch (error) {\n      this.setState(ConnectionState.ERROR);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown connection error';\n      const proxyError = new Error(`Failed to connect: ${errorMessage}`);\n      this.events.emit('error', proxyError);\n      throw proxyError;\n    }\n  }\n\n  /**\n   * Disconnect from both services\n   */\n  async disconnect(): Promise<void> {\n    this.setState(ConnectionState.DISCONNECTED);\n\n    // Disconnect from both services\n    const disconnectPromises: Promise<void>[] = [];\n    \n    if (this.realtimeConnection) {\n      disconnectPromises.push(this.realtimeConnection.disconnect());\n    }\n    \n    if (this.mcpClient) {\n      disconnectPromises.push(this.mcpClient.disconnect());\n    }\n\n    await Promise.all(disconnectPromises);\n\n    this.mcpClient = null;\n    this.realtimeConnection = null;\n    this.mcpTools = [];\n  }\n\n  /**\n   * Get current connection state\n   */\n  getState(): ConnectionState {\n    return this.currentState;\n  }\n\n  /**\n   * Get discovered MCP tools\n   */\n  getTools(): MCPTool[] {\n    return [...this.mcpTools];\n  }\n\n  /**\n   * Check if proxy is connected and ready\n   */\n  isReady(): boolean {\n    return this.currentState === ConnectionState.CONNECTED &&\n           this.mcpClient?.isConnected() === true &&\n           this.realtimeConnection?.isConnectionActive() === true;\n  }\n\n  /**\n   * Add event listener\n   */\n  on<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void {\n    this.events.on(event, listener);\n  }\n\n  /**\n   * Remove event listener\n   */\n  off<K extends keyof ProxyEvents>(event: K, listener: ProxyEvents[K]): void {\n    this.events.off(event, listener);\n  }\n\n  /**\n   * Connect to the MCP server and discover available tools\n   */\n  private async connectToMCP(): Promise<void> {\n    this.mcpClient = new MCPClient(\n      this.config.mcp.url,\n      this.config.mcp.auth,\n      this.config.mcp.timeout\n    );\n\n    // Discover available tools\n    this.mcpTools = await this.mcpClient.discoverTools();\n    \n    if (this.mcpTools.length === 0) {\n      throw new Error('No tools discovered from MCP server');\n    }\n\n    this.events.emit('mcpConnect');\n  }\n\n  /**\n   * Connect to the Realtime API with the discovered MCP tools\n   */\n  private async connectToRealtime(): Promise<void> {\n    // Convert MCP tools to Realtime API tool format\n    const realtimeTools: RealtimeTool[] = this.mcpTools.map(this.convertMCPToRealtimeTool);\n\n    // Set up event handlers for the Realtime connection\n    const handlers: RealtimeEventHandlers = {\n      onSessionCreated: () => {\n        this.log('Realtime session created');\n      },\n      onSessionUpdated: () => {\n        this.log('Realtime session updated with MCP tools');\n      },\n      onFunctionCall: this.handleFunctionCall.bind(this),\n      onError: (error) => {\n        this.events.emit('error', error);\n      },\n      onConnect: () => {\n        this.events.emit('realtimeConnect');\n      },\n      onDisconnect: () => {\n        this.events.emit('realtimeDisconnect');\n      },\n    };\n\n    this.realtimeConnection = new RealtimeConnection(this.config.openai, handlers);\n    await this.realtimeConnection.connect(realtimeTools);\n  }\n\n  /**\n   * Handle function calls from the Realtime API\n   * This is the core of our proxy functionality\n   */\n  private async handleFunctionCall(event: ResponseFunctionCallArgumentsDoneEvent): Promise<void> {\n    const { name, arguments: argsString, call_id } = event;\n    \n    try {\n      // Parse function arguments\n      const args = JSON.parse(argsString) as Record<string, unknown>;\n      \n      this.events.emit('functionCall', name, args);\n      this.log(`Executing MCP tool: ${name}`);\n\n      // Execute the MCP tool\n      if (!this.mcpClient) {\n        throw new Error('MCP client not connected');\n      }\n\n      const result = await this.mcpClient.callTool(name, args);\n      \n      // Format result for Realtime API\n      const formattedResult = this.formatMCPResult(result);\n      \n      this.events.emit('functionResult', name, formattedResult);\n      \n      // Send result back to Realtime API\n      if (!this.realtimeConnection) {\n        throw new Error('Realtime connection not active');\n      }\n\n      this.realtimeConnection.sendFunctionResponse(call_id, formattedResult);\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.log(`Function call failed: ${errorMessage}`);\n      \n      // Send error back to Realtime API\n      const errorResult = `Error executing ${name}: ${errorMessage}`;\n      this.realtimeConnection?.sendFunctionResponse(call_id, errorResult);\n      \n      this.events.emit('error', new Error(`Function call failed: ${errorMessage}`));\n    }\n  }\n\n  /**\n   * Convert MCP tool to Realtime API tool format\n   */\n  private convertMCPToRealtimeTool(mcpTool: MCPTool): RealtimeTool {\n    const parameters: RealtimeTool['parameters'] = {\n      type: 'object',\n      properties: mcpTool.inputSchema.properties,\n      additionalProperties: mcpTool.inputSchema.additionalProperties ?? false,\n    };\n\n    // Only set required if it's defined\n    if (mcpTool.inputSchema.required) {\n      parameters.required = mcpTool.inputSchema.required;\n    }\n\n    const tool: RealtimeTool = {\n      type: 'function',\n      name: mcpTool.name,\n      parameters,\n    };\n\n    // Only set description if it's defined\n    if (mcpTool.description) {\n      tool.description = mcpTool.description;\n    }\n\n    return tool;\n  }\n\n  /**\n   * Format MCP tool result for Realtime API\n   */\n  private formatMCPResult(result: any): string {\n    if (typeof result === 'string') {\n      return result;\n    }\n\n    if (result && typeof result === 'object') {\n      // Handle MCP tool call result format\n      if (result.content && Array.isArray(result.content)) {\n        const textContent = result.content\n          .filter((item: any) => item.type === 'text')\n          .map((item: any) => item.text)\n          .join('\\n');\n        \n        return textContent || JSON.stringify(result);\n      }\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Set the current connection state and emit event\n   */\n  private setState(state: ConnectionState): void {\n    if (this.currentState !== state) {\n      this.currentState = state;\n      this.events.emit('stateChange', state);\n    }\n  }\n\n  /**\n   * Simple logging utility\n   */\n  private log(message: string): void {\n    if (this.config.settings?.logLevel === 'debug') {\n      console.log(`[RealtimeMCPProxy] ${message}`);\n    }\n  }\n} "]}